generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int                     @id @default(autoincrement())
  createdAt   DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?               @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?               @map("deleted_at") @db.Timestamptz(6)
  url         String                  @unique(map: "unique_url") @db.VarChar
  title       String                  @db.VarChar
  source      String                  @map("article_source") @db.VarChar
  cityId      Int                     @map("city_id")
  description String?                 @db.VarChar
  imageUrl    String?                 @map("image_url") @db.VarChar
  restaurants ArticlesToRestaurants[] @relation("articlestorestaurantsToarticles")
  cities      City                    @relation("articlesTocities", fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_city_id")

  @@map("articles")
}

model Award {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  restaurantId Int        @map("restaurant_id")
  source       String     @map("award_source") @db.VarChar
  type         String     @map("award_type") @db.VarChar
  year         Int
  url          String     @db.VarChar
  chef         String?    @db.VarChar
  metadata     Json?      @db.JsonB
  restaurants  Restaurant @relation(fields: [restaurantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("awards")
}

model City {
  city        String       @db.VarChar
  state       String?      @db.VarChar
  country     String       @db.VarChar
  id          Int          @id @default(autoincrement())
  articles    Article[]    @relation("articlesTocities")
  restaurants Restaurant[] @relation("citiesTorestaurants")

  @@unique([city, state, country])
  @@map("cities")
}

model Restaurant {
  id              Int                     @id @default(autoincrement())
  createdAt       DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?               @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?               @map("deleted_at") @db.Timestamptz(6)
  name            String                  @db.VarChar
  gPlaceId        String?                 @unique @map("g_place_id") @db.VarChar
  cityId          Int?                    @map("city_id")
  cuisine         String?                 @db.VarChar
  city            String?                 @db.VarChar
  lat             Float?                  @db.DoublePrecision
  long            Float?                  @db.DoublePrecision
  country         String?                 @db.VarChar
  chef            String?                 @db.VarChar
  website         String?                 @db.VarChar
  shortAddress    String?                 @db.VarChar
  reservationLink String?                 @db.VarChar
  price           Int?                    @db.Integer
  articles        ArticlesToRestaurants[] @relation("articlestorestaurantsTorestaurants")
  awards          Award[]
  cities          City?                   @relation("citiesTorestaurants", fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_city_id")

  @@map("restaurants")
}

model ArticlesToRestaurants {
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  articleId    Int        @map("article_id")
  restaurantId Int        @map("restaurant_id")
  description  String?    @db.VarChar
  url          String?    @db.VarChar
  id           Int        @id @default(dbgenerated("nextval('_articlestorestaurants_id_seq'::regclass)"))
  articles     Article    @relation("articlestorestaurantsToarticles", fields: [articleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "articles_restaurants_article_id_fkey")
  restaurants  Restaurant @relation("articlestorestaurantsTorestaurants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "articles_restaurants_restaurant_id_fkey")

  @@map("_articlestorestaurants")
}

model PlaceIdCache {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  placeId   String?   @map("place_id") @db.VarChar
  name      String    @db.VarChar
  cityId    Int?      @map("city_id")
  city      String?

  @@unique([name, cityId])
  @@map("place_id_cache")
}
